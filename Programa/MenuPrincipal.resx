<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>